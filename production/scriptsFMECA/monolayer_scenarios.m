%% SCRIPT TO ASSESS MODAL CRITICALITY of monolayer scenarios
% INRA\Audrey Goujon - 27/08/11
%
% database ('substancedb.ods') contains the 'substance' table generated by 'consolidation_substance_rawdb.m' (which is copied and pasted in substancedb.ods) 
% and the other table of 'substance_rawdb': polymer, polymer_alias, nfo... 
%
% rev :
% 21/07/2011 first script
% 22/07/2011 fix db
% 25/07/2011 add dbscenario and dbfilescenario
% 24/08/2011 add comments and compatibilty
% 25/08/2011 monolayer_scenarios5
% 25/08/2011 monolayer_scenarios6
% 27/08/2011 RC interpretations

%% Local path to initiate the simulation (to be executed to assign variables)
switch localname
    case 'WSLP-OLIVIER2'
        local = 'D:\Data\Olivier\INRA\Etudiants & visiteurs\Audrey Goujon\production\';
        physicochemfolder = fullfile(find_path_toolbox('migration'),'database');
    case 'WS-MOL4'
        local = 'C:\Data\Olivier\Audrey_Goujon\Matlab_FMECA\production';
        physicochemfolder = fullfile(find_path_toolbox('migration'),'database'); %can be setup to another location
    case 'mol10.agroparistech.fr'
        local = '/home/olivier/MaiNguyen/ANR_SFPD/WP2_FMECA/production';
        physicochemfolder = fullfile(find_path_toolbox('migration'),'database');
        %physicochemfolder = ''; % empty = migration/database
end
% Database listing scenarios contains (assumed to be located in %local%/inputs/, where local is defined above)
% table sim: to be used with FMECAengine
% tales geometry, polymer, chemical functions (referenced by sim)
% PLEASE: do not mix tables in folder inputs/ and in database/
% Note that FMECAengine assumes always that sim is located in %local%/inputs/
scenariofolder = fullfile(local,'inputs');
scenariotables = {'scenario' 'food' 'foodsimulant' 'foodtexture' 'geometry' 'storage' 'process' 'consumption' 'units'};
fmecamainfile = 'monolayer_scenarios6.ods'; % file containing raw and sim tables

% Database of physico-chemical properties (of polymers and substances)
% Independent on the definition of scenarios
% assumed to be in the sub-folder database/ (locateddby default in the same folder as migration toolbox)
dbfilesubstance = 'substancedb.ods'; % database used to execute keys
substancetables = {'substance' 'polymer' 'chemical_function' 'technologicalclass'};

% Paths for results and modal database (output)
outputpathref = fullfile('monolayer_scenarios','reference');  % folder that contains all outputs references
outputpath = fullfile('monolayer_scenarios','omission');      % folder that contains all outputs
figurefolder = fullfile(local,'figures'); if ~exist(figurefolder,'dir'), mkdir(figurefolder); end
fmecadbfile = 'fmecamodal.mat'; % base of conditions

%% LOAD databases
% Removing PREFETCH files force LOADFMECAENGINEDB to refresh databases, use alternatively noprefetch
noprefetch = true; % set noprefetch to TRUE to force an update of all databases (set to FALSE to use the PREFETCH files instead)
dbsubstance = loadfmecaenginedb('dbfile',dbfilesubstance,'dbpath',physicochemfolder,'sheetname',substancetables,'noprefetch',noprefetch);
dbscenario = loadfmecaenginedb('dbfile',fmecamainfile,'dbpath',scenariofolder,'sheetname',scenariotables,'noprefetch',noprefetch);
% Joint databases including physico-chemical properties and scenario informations
dbfull = catstruct(dbsubstance,dbscenario);
% If you need to check your scenarios with keys
% use syntaxes such as: key2key(dbfull,'...->....->...')
ktst = {
'(LDPEYogurtBottle:scenario::id->food:food::id->shelflife)*(LDPEYogurtBottle:scenario::id->food:food::id->shelflifeunit:units::unit->SI)'
'(LDPEYogurtBottle:scenario::id->geometry:geometry::id->mF)*(LDPEYogurtBottle:scenario::id->geometry:geometry::id->mFunit:units::unit->SI)/((LDPEYogurtBottle:scenario::id->food:food::id->rhoF)*(LDPEYogurtBottle:scenario::id->geometry:geometry::id->A)*(LDPEYogurtBottle:scenario::id->geometry:geometry::id->Aunit:units::unit->SI))'
'(LDPEYogurtBottle:scenario::id->geometry:geometry::id->lP1)*(LDPEYogurtBottle:scenario::id->geometry:geometry::id->lPunit:units::unit->SI)'
'prctile((LDPEYogurtBottle:scenario::id->polymer:polymer::acronym->composition:substance::technologicalclass->SML)*(LDPEYogurtBottle:scenario::id->food:food::id->rhoF)*(LDPEYogurtBottle:scenario::id->polymer:polymer::acronym->composition:substance::technologicalclass->SMLunit:units::unit->SI),25)'
'max(PPDrinkStraw:scenario::id->polymer:polymer::acronym->composition:technologicalclass::id->CP0)*(PPDrinkStraw:scenario::id->polymer:polymer::acronym->rhoP)*(PPDrinkStraw:scenario::id->polymer:polymer::acronym->composition:technologicalclass::id->Cunit:units::unit->SI)'
'LDPEYogurtBottle:scenario::id->foodtexture:foodtexture::id->Bi'
'Dpiringer((PPDrinkStraw:scenario::id->polymer),(PPDrinkStraw:scenario::id->polymer:polymer::acronym->composition:substance::technologicalclass->M),(PPDrinkStraw:scenario::id->temperature:consumption::id->temperature))'
'PPDrinkStraw:scenario::id->foodsimulant:foodsimulant::id->K'
};

%% Reference simulations
% If the results are already calculated, you do not need to restart this step for interpretation
fmecadef = struct( ...
'local',local,...
'fmecamainfile',fmecamainfile,... FMECAengine assumes always %local%/inputs
'database',dbfull,... merge physico-chemical tables with geometry, use,... tables (as they are refereced by sim)
'inputpath','inputs',...
'outputpath',outputpathref, ...
'fmecadbfile',fmecadbfile ...
);
% launch fmecaengine
[fmecadbref,rawdata,dataref] = fmecaengine(fmecadef); % dataref (with inherited fields) is keep for modifications

%% INTERPRETATION (COMMON SECTION)
% reload data if needed
if ~exist('fmecadbref','var'), tmp=load(fullfile(local,outputpathref,fmecadbfile),'fmecadb'); fmecadbref = tmp.fmecadb; clear tmp; end
% extract properties for further analyzes
severity=@(CF,SML) 100*99./max(100*SML./CF-1,0); % Severity definition
id = fieldnames(fmecadbref); idleg = arrayfun(@(x) sprintf('%0.2d',x),1:length(id),'UniformOutput',false);
idroot = fmecaroot(fmecadbref,'inherit'); % extract root
CFref = cellfun(@(f) fmecadbref.(f).CF,id);
SMLref = cellfun(@(f) fmecadbref.(f).SML,id);
sref = severity(CFref,SMLref);
Dref = cellfun(@(f) fmecadbref.(f).D,id);
Kref = cellfun(@(f) fmecadbref.(f).k,id);
% build M used in sim keys to derive D values
dbsim = loadfmecaenginedb('dbfile',fmecamainfile,'dbpath',fullfile(local,'inputs'),'sheetname','sim','headers',2,'noprefetch',noprefetch);
Mrules = uncell(regexp(dbsim.D1m2s,',\((.*)\),','tokens')); % rule for molecular mass
refprctiles = [5 50 95];
Mvaluesdb = cell2struct(num2cell(key2key(dbfull,Mrules,[],[],refprctiles),2),dbsim.idusercode);
Drefdb  = cell2struct(num2cell(key2key(dbfull,dbsim.D1m2s,[],[],fliplr(refprctiles)),2),dbsim.idusercode);
Mref = cellfun(@(f) Mvaluesdb.(idroot.(f))(nearestpoint(fmecadbref.(f).D,Drefdb.(idroot.(f)))),id);
% retrieve polymer from databases
polymerdb = cell2struct(dbfull.scenario.polymer,dbsim.idusercode);
polymerref = cellfun(@(f) polymerdb.(idroot.(f)),id,'UniformOutput',false);
polymerreflist = unique(polymerref)';


%% Basic interpretation of reference simulations (STEP1)
% figure
figname = [regexprep(fmecamainfile,'\..*$','') '_reference']; % figure name
figure
plotcol(CFref,sref,'o',SMLref,log10(Dref),{'\fontsize{16}C_F (kg\cdotm^{-3})','\fontsize{16}severity',{'\fontsize{14}-log_{10}(D)' '(m^2\cdots^{-1})'},'\fontsize{12}SML (kg\cdotm^{-3})'})
formatax(gca,'fontsize',16,'yscale','log','xscale','log')
plot(xlim,[33 100;33 100],'k:','linewidth',2)
ht=cellfun(@(x,y,t) text(x,y,t,'fontsize',8,'horizontalalignment','center','verticalalignment','middle'),num2cell(CFref,2),num2cell(sref,2),idleg');
set(ht((SMLref<1.5e-3)|(SMLref>4e-3)),'Color',[1 1 1])
txt = [idleg;id'];
text(2*min(xlim),max(ylim)/2,sprintf('%s:%s\n',txt{:}),'fontsize',6.5,'verticalalignment','top')
% print
print_pdf(600,figname,figurefolder,'nocheck')
print_png(200,figname,figurefolder)


%% Basic interpretation of reference simulations (STEP 2)
Kunique = unique(Kref)';
bad = find(sref>=100);
figname = [regexprep(fmecamainfile,'\..*$','') '_reference2']; % figure name
figure
hs = subplots([0.1 1 0.4],[1 .3],0.03,[],'alive',[3 5]);
for i=1:length(polymerreflist)
    % effect M
    subplot(hs(1)), hold on
    isP = ismember(polymerref(bad),polymerreflist{i});
    p = Mref(bad(isP)); punique = unique(p)';
    plot(prctile(p,[0 100]),i*[1 1],'k-','linewidth',2)
    % plot(p,ones(size(p))*i,'ko','markerfacecolor','none')
    idu = idleg(bad(isP))';
    for eachp = punique
        u = ismember(p,eachp);
        text(eachp,i,regexprep(sprintf('%s,',idu{u}),',$',''),'fontsize',8,'horizontalalignment','center','verticalalignment','bottom')
    end
    text(0-10,i,polymerreflist{i},'fontsize',14,'horizontalalignment','right','verticalalignment','middle')
    % effect K
    subplot(hs(2)), hold on
    plot(Kref(bad(isP)),ones(size(p))*i,'ko','markerfacecolor','k')
end
formatax(hs,'fontsize',14)
set(hs,'ylim',[0 length(polymerreflist)+1])
set(hs(2),'xscale','log','xlim',[Kunique(1)/2 Kunique(2)*2],'xtick',Kunique,'xminortick','off')
text(0.1,-.1,'dairy','fontsize',14,'horizontalalignment','right','verticalalignment','middle','rotation',90)
text(1,-.1,'fatty','fontsize',14,'horizontalalignment','right','verticalalignment','middle','rotation',90)
subplot(hs(1)), set(hs(1),'xlim',[min(xlim)*0.8 1.1*max(Mref)],'xticklabelmode','auto','xscale','linear')
xlabel('M (g\cdotmol^{-1})')
titles(hs,'','x',[.9 .8],'y',.95,'suffix',')','fontsize',14)

% print
print_pdf(600,figname,figurefolder,'nocheck')
print_png(200,figname,figurefolder)

%% END REVISIONS O.V. 27/08/11

%% Simulations with omission
data = dataref;
[data(1:length(data)).Foscale] = deal('[0 0]'); % add deletion "code" to all rows
fmecadb=fmecaengine(...
'local',local,...
'fmecamainfile',data,...
'inputpath','omission.ods',...
'outputpath',outputpath, ...
'fmecadbfile',fmecadbfile ...
);

%% Interpretation CF(path length = 4) - CF(path length = 3)
load(fullfile(local,outputpath,fmecadbfile)) % load fmecadb (the variable is created)
[res,resunique] = fmecasingle(fmecadb);

%% PARETO
severity=@(CF,SML) 100*99./max(100*SML./CF-1,0); % Severity definition
colinterp = @(s) interp1(linspace(0,1,64),jet(64),s/100,'linear',0); % Severity color (from blue to red and black beyond 100)
hfig=figure; formatfig(hfig,'figname',sprintf('PARETO_%s',regexprep(fmecadbfile,'.mat','')),'paperposition',[ 5.0467    7.2245   10.8907   15.2284]); % page format
hs = subplots([.2 1],[.6 .4],[],[],'alive',3); % layout 
subplot(hs), hold on, i = 0;
for step=fieldnames(res)' % for all nodes stored in res
    i=i+1; % counter
    s   = severity(res.(step{1}),fmecadb.(step{1}).SML); % severity for current node
    col = colinterp(s);
    s(s==0)=NaN; % force NaN for severities=0
    for j=1:length(s), plot(i,s(j),'markerfacecolor',col(j,:),'markeredgecolor',col(j,:),'linestyle','none','markersize',12,'marker','o'), end
    text(i,0,[step{1} '  '],'fontsize',16,'rotation',90,'HorizontalAlignment','right','VerticalAlignment','middle');
end
for r = [33 50 100]
    hr = refline(0,r); set(hr,'color',colinterp(r),'linewidth',2,'linestyle',':');
    text(max(xlim),r,sprintf('Severity=%d',r),'HorizontalAlignment','right','VerticalAlignment','bottom','fontsize',10,'fontweight','bold','color',colinterp(r));
end
formatax(hs,'fontsize',14,'xticklabel','','xlim',[0 i+1]), ylabel('Severity','fontsize',16);
print_png(300,get(gcf,'filename'),fullfile(local,outputpath));

%% RISK RANKING
steplist = fieldnames(resunique.value); nsteps = length(steplist);
colinterp = @(s) interp1(linspace(0,1,64),jet(64),s/100,'linear',0); % Severity color (from blue to red and black beyond 100)
hfig=figure; formatfig(hfig,'figname',sprintf('RISK_%s',regexprep(fmecadbfile,'.mat','')),'paperposition',[  5.0467    5.0887   10.8907   19.5000]); % page format
hscopy = subplots(1,ones(1,nsteps),0,0.05); set(hscopy,'visible','off');
hs = subplots(1,ones(1,nsteps),0,0.05,'position',gcf);
smax = max(cellfun(@(n) max(severity(resunique.value.(n),fmecadb.(n).SML)),steplist)); % maximal severity
smin = min(cellfun(@(n) max(severity(resunique.value.(n),fmecadb.(n).SML)),steplist)); % minimal severity
set(hscopy,'xlim',[0 1.1*smax])
for i=1:nsteps
    dCF = resunique.value.(steplist{i}); % all dCF values
    [dCFu,iu] = unique(dCF); % unique values
    su = severity(dCFu,fmecadb.(steplist{i}).SML); % convert to severity
    proba = resunique.proba.(steplist{i}); % probability assiciated to dCF
    probau = arrayfun(@(u) sum(proba(dCF==u)), dCFu); %idem with dCFu
    ymax = 1.2*max(probau);
    % regions
    subplot(hscopy(i))
    colormap(rgb({'MintCream' 'MistyRose'}));  [xp,yp] = meshgrid([33 100 max(110,1.1*smax)],[0 ymax]);
    hp=patch('Vertices',[xp(:) yp(:)],'Faces',[1 2 4 3 1;3 4 6 5 3],'facecolor','flat','edgecolor','none','FaceVertexCData',[1;2],'CDataMapping','direct');
    set(hp,'visible','on'), ylim([0 ymax])
    % stem
    subplot(hs(i)), hold on
    col = colinterp(su); % interpolated colors
    for j=1:length(su)
        plot(su(j)*[1 1],[0 probau(j)],'color','k','linestyle','--','linewidth',2.5)
        plot(su(j),probau(j),'marker','o','markersize',12,'markerfacecolor',col(j,:),'markeredgecolor',col(j,:))
        text(su(j),0,[resunique.id.(steplist{i}){iu(j)} ' '],'fontsize',8,'HorizontalAlignment','right','VerticalAlignment','Bottom','Rotation',270)
    end
    ylim([0 ymax])
    ylabel(steplist{i},'fontsize',14)
    % references values
    for r = [10 33 50 100]
        plot([r r],ylim,'color',colinterp(r),'linewidth',2,'linestyle',':');
        text(r,max(ylim),sprintf('%d',r),'HorizontalAlignment','left','VerticalAlignment','bottom','fontsize',10,'fontweight','bold','color',colinterp(r),'rotation',270);
    end
end
formatax(hs,'fontsize',14,'xticklabel','','xlim',[0 1.1*smax],'xscale','linear','color','none')
set(hs(end),'xticklabelmode','auto')
xlabel('Severity','fontsize',16);
print_png(300,get(gcf,'filename'),fullfile(local,outputpath));


%% Severity GRAPH restricted to resunique (all combined)
res_asseverity = resunique.value; for f=fieldnames(resunique.value)', res_asseverity.(f{1}) = severity(resunique.value.(f{1}),fmecadb.(f{1}).SML); end
[hg,hgtmp]=fmecagraph(fmecadb,res_asseverity,'min',0,'max',100); delete(hgtmp)
set(hg,'filename',sprintf('SEVERITYGRAPH2_%s',regexprep(fmecadbfile,'.mat','')))
graphfilename = fullfile(local,outputpath,[get(gcf,'filename') '.png']);
print_png(300,graphfilename); pngtruncateim(graphfilename,true,100);
print_pdf(300,regexprep(graphfilename,'\.png$','.pdf'),filesep,'nocheck')
